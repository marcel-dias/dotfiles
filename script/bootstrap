#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ""

info () {
  # shellcheck disable=SC2059
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  # shellcheck disable=SC2059
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  # shellcheck disable=SC2059
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  # shellcheck disable=SC2059
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ""
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info "setup gitconfig"

    user " - What is your github author name?"
    read -e git_authorname
    user " - What is your github author email?"
    read -e git_authoremail
    user " - What is ssh public key to sign git commits?"
    read -e git_ssh_pub_key


    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/SSH_PUB_KEY/$git_ssh_pub_key/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success "gitconfig"
  fi
}


link_file () {
  local src=$1 dst=$2
  # shellcheck disable=SC1007
  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      # shellcheck disable=SC2086,SC2155
      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

link_dotfiles () {
  info "installing dotfiles"

  local overwrite_all=false backup_all=false skip_all=false
  # shellcheck disable=SC2044
  for src in $(find "$DOTFILES_ROOT" -maxdepth 3 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_apps() {
  info " Installing Applications"
  if ./bin/dot; then
    success "Applications installed"
  else
    fail "Error installing Applications"
  fi
}

find_zsh() {
  if which zsh >/dev/null 2>&1 && grep "$(which zsh)" /etc/shells >/dev/null; then
    which zsh
  else
    echo "/bin/zsh"
  fi
}

setup_zsh() {
  zsh="$(find_zsh)"
  which chsh > /dev/null 2>&1 &&
  chsh -s "$zsh" &&
  success "set $("$zsh" --version) at $zsh as default shell"
}

set_macos_defaults() {
  info "Setting macOS defaults..."
  "$DOTFILES_ROOT/macOS/set-defaults.sh"
}

setup_gitconfig
link_dotfiles
setup_zsh
install_apps
set_macos_defaults

echo ""
echo "  All installed!"
